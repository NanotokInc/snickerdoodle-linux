#!/bin/bash
MY_NAME=$(basename $0)
cd $(dirname $0)
MY_DIR=$PWD
cd - > /dev/null
VERSION=1.1

set -o nounset

source ~/.bash_functions

function get_num_cpus()
{
	lscpu | grep '^CPU(s):' | cut -d':' -f2 | xargs
}

function build_kernel()
{
	local num_jobs=${1:-4}
	printf "%s: building uImage\n" $MY_NAME
	$do make -j${num_jobs} ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- LOADADDR=0x8000 uImage
}

function build_modules()
{
	local num_jobs=${1:-4}
	printf "%s: building modules\n" $MY_NAME
	$do make -j${num_jobs} ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- modules
}

function get_temp_path()
{
	echo ~/Temp/$(today)
}

function create_temp_dir()
{
	local path=${1:?}
	if [[ -e "$path" ]]
	then
		$do sudo rm -r $path/*
	fi
	$do mkdir -p $path
}

function copy_to_temp_dir()
{
	local path=${1:?}
	local num_jobs=${2:-4}
	printf "%s: gathering files\n" $MY_NAME
	$do sudo make -j${num_jobs} ARCH=arm INSTALL_MOD_PATH=$path modules_install
	$do sudo cp arch/arm/boot/uImage $path
}

function validate_temp_dir()
{
	local path=${1:?}
	local ret=0
	if [[ ! -f $path/uImage ]]
	then
		printf "%s: %s not found\n" $MY_NAME $path/uImage 1>&2
		ret=$((ret + 1))
	fi
	if [[ ! -d $path/lib ]]
	then
		printf "%s: %s not found\n" $MY_NAME $path/lib 1>&2
		ret=$((ret + 1))
	fi
	return $ret
}

function create_tarball()
{
	local path=${1:?}
	cd $path
	local tarball=$(strings uImage | grep nanotok).tar.gz
	printf "%s: creating tarball %s\n" $MY_NAME $path/$tarball
	$do sudo tar czf $tarball uImage lib
}

function copy_to_device()
{
	local path=${1:?}
	local device=${2:?}
	printf "%s: copying to %s\n" $MY_NAME $device
	$do sshpass -p snickerdoodle scp $path/Linux*-nanotok-*.tar.gz snickerdoodle@${device}
}

copy=0
do=

while [[ "$1" =~ ^- && ! "$1" == "--" ]]
do
	case $1 in
		-v | --version )
			echo "$VERSION"
			exit
		;;
		-c | --copy )
			copy=1
		;;
		-y | --dry-run )
			do=echo
		;;
	esac
	shift
done
if [[ "$1" == '--' ]]
then
	shift
fi

device_path=${1:?device path required}

num_cpus=$(get_num_cpus)
build_kernel $num_cpus && build_modules $num_cpus
result=$?
if [[ $result -ne 0 ]]
then
	printf "%s: build failed, aborting\n" $MY_NAME 1>&2
	exit 1
fi

temp_path=$(get_temp_path)
create_temp_dir $temp_path && copy_to_temp_dir $temp_path $num_cpus && validate_temp_dir $temp_path
result=$?
if [[ $result -ne 0 ]]
then
	printf "%s: failed validation, aborting\n" $MY_NAME 1>&2
	exit 1
fi

create_tarball $temp_path
result=$?
if [[ $result -eq 0 && $copy -ne 0 ]]
then
	copy_to_device $temp_path $device_path
fi
